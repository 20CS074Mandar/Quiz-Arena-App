package com.example.quiz

import android.content.Intent
import android.content.res.ColorStateList
import android.graphics.Color
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.os.CountDownTimer
import android.os.Handler
import android.view.View
import android.widget.Button
import android.widget.Toast
import androidx.cardview.widget.CardView
import com.example.quiz.databinding.ActivityQuestionsBinding
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseUser
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener

class QuestionsActivity : AppCompatActivity(),View.OnClickListener{

    //view binding
    private lateinit var binding:ActivityQuestionsBinding
    //Firebase auth
    private lateinit var auth: FirebaseAuth
    //firebase user
    private lateinit var user:FirebaseUser


    var question=""
    var optionA=""
    var optionB=""
    var optionC=""
    var optionD=""
    var correctAnswer=""

    var questionCount=0
    var questionNo=0
    var userScore=0

    lateinit var countDownTimer: CountDownTimer

    private var categoryName: String = ""

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        binding= ActivityQuestionsBinding.inflate(layoutInflater)
        setContentView(binding.root)

        //getting current user
        auth= FirebaseAuth.getInstance()
        user=auth.currentUser!!

        //getting category name from the category selected
        val i=intent
        categoryName=i.getStringExtra("categoryname").toString()

        getquestion()

    }



    private fun getquestion()
    {
        //getting refernece to the categories questions
        val categoryRef=FirebaseDatabase.getInstance().getReference("Categories")
            .child("${categoryName}").child("Questions")

        categoryRef.addValueEventListener(object :ValueEventListener{
            override fun onDataChange(snapshot: DataSnapshot) {

                resetOptionColor()
                questionCount=snapshot.childrenCount.toInt()

                question=snapshot.child(questionNo.toString()).child("q").getValue().toString()
                optionA=snapshot.child(questionNo.toString()).child("a").getValue().toString()
                optionB=snapshot.child(questionNo.toString()).child("b").getValue().toString()
                optionC=snapshot.child(questionNo.toString()).child("c").getValue().toString()
                optionD=snapshot.child(questionNo.toString()).child("d").getValue().toString()

                setQuestion()
            }
            override fun onCancelled(error: DatabaseError) {
                Toast.makeText(this@QuestionsActivity, error.message, Toast.LENGTH_SHORT).show()
            }
        })
    }

    //on clicking on any components to be specific in this case if user clicks on buton

    private fun setQuestion()
    {
        binding.questionTv.text=question
        binding.optionA.text=optionA
        binding.optionB.text=optionB
        binding.optionC.text=optionC
        binding.optionD.text=optionD

        startTimer()
        questionNo=0
    }

    //completed
    override fun onClick(v: View) {
        var selectedOption =""

        when (v.id) {
            R.id.card_OptionA -> selectedOption = "a"
            R.id.card_OptionB -> selectedOption = "b"
            R.id.card_OptionC -> selectedOption = "c"
            R.id.card_OptionD -> selectedOption = "d"
        }

        countDownTimer.cancel()
        checkAnswer(selectedOption,v)
    }

    private fun startTimer()
    {
        countDownTimer=object :CountDownTimer(12000,1000){
            override fun onTick(millisUntilFinished: Long) {
                if(millisUntilFinished<10000)
                {
                    binding.timerTv.text=(millisUntilFinished/1000).toString()
                }
            }
            override fun onFinish() {
                changeQuestion()
            }
        }
        countDownTimer.start()
    }

    private fun changeQuestion() {

        if (questionNo<questionCount)
        {
            questionNo++
            binding.timerTv.text=10.toString()
            startTimer()
        }
        else
        {
            val i=Intent(this,ResultActivity::class.java)
            sendscore_to_Firebase()
            i.putExtra("userscore",userScore)
            i.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            startActivity(i)
        }

    }

    private fun resetOptionColor()
    {
        binding.cardOptionA.setCardBackgroundColor(R.color.white.toInt())
        binding.cardOptionB.setCardBackgroundColor(R.color.white.toInt())
        binding.cardOptionC.setCardBackgroundColor(R.color.white.toInt())
        binding.cardOptionD.setCardBackgroundColor(R.color.white.toInt())

    }


    private fun checkAnswer(selectedOption:String,view: View)
    {
        if (selectedOption==correctAnswer)
        {

            //Right Answer
            (view as CardView).backgroundTintList = ColorStateList.valueOf(Color.GREEN)
            userScore++
        }
        else
        {
            when (correctAnswer) {
                "a" -> binding.cardOptionA.setBackgroundTintList(ColorStateList.valueOf(Color.GREEN)                )
                "b" -> binding.cardOptionB.setBackgroundTintList(ColorStateList.valueOf(Color.GREEN))
                "c"-> binding.cardOptionC.setBackgroundTintList(ColorStateList.valueOf(Color.GREEN))
                "d"-> binding.cardOptionC.setBackgroundTintList(ColorStateList.valueOf(Color.GREEN))
            }
        }


        val handler = Handler()
        handler.postDelayed({ changeQuestion() }, 2000)
    }

    public fun sendscore_to_Firebase()
    {
        val uId:String=user.uid
        val ref=FirebaseDatabase.getInstance().getReference("Users").child("${uId}")
        ref.child("User Score").setValue(userScore)
            .addOnSuccessListener {
                Toast.makeText(this, "Score Updated Successfully", Toast.LENGTH_SHORT).show()
            }
    }


}